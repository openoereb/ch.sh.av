name: 'AV Sync'

on:
  schedule:
    # this is in UTC so it means every day at 3 AM this trigger is pulled
    - cron: 0 2 * * *
  workflow_dispatch:
    inputs:
      dockerbuild:
        description: "should a docker image be built"
        required: true
        default: "YES"
    
jobs:
  sync:
    environment: sync
    name: 'AV Sync'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    env:
      DOWNLOAD_URL: https://www.geodienste.ch/downloads/interlis/av/SH
      FILE_NAME: av_SH_lv95.zip

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # Update references
    - name: Git checkout master
      run: |
        git checkout master
    # Download current AV state
    - name: Download AV
      run: |
        curl -X GET -o /tmp/av_SH_lv95.zip $DOWNLOAD_URL/$FILE_NAME
        ls -ls /tmp/$FILE_NAME
    - name: Unzip AV
      run: |
        unzip -o /tmp/$FILE_NAME '*.itf' -d ./
    - name: Commit changes
      env:
        CONTAINERNAME: "database"
      run: |
        git add .
        git config --global user.email "${{ secrets.GIT_EMAIL }}"
        git config --global user.name "${{ secrets.GIT_NAME }}"
        TIMESTAMP=$(date --iso-8601=seconds)
        git fetch -p
        CHANGES=$(git diff --name-only origin/master | grep ".itf")
        if [ $($CHANGES | wc -l) -eq "0" ]; then
          echo "  ðŸŸ¢ Git repo is clean => nothing to do."
        else
          echo "  ðŸ”´ Git repo dirty => commiting changes and pushing"
          git commit . -m "update AV on $TIMESTAMP from $DOWNLOAD_URL/$FILE_NAME"
          git push
        fi
        if [ $($CHANGES | wc -l) != "0" ] || [ "${{ inputs.dockerbuild }}" = "YES" ]; then
          docker run --name $CONTAINERNAME -d -v $(pwd):/data -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} -e POSTGRES_HOST_AUTH_METHOD=md5 -e PG_READ_PWD=${{ secrets.PG_READ_PWD }} -e PG_WRITE_PWD=${{ secrets.PG_WRITE_PWD }} -e PG_GRETL_PWD=${{ secrets.PG_GRETL_PWD }} ghcr.io/openoereb/oereb-db-structure:latest
          until docker exec $CONTAINERNAME pg_isready; do
            echo "$CONTAINERNAME was not ready, waiting another cycle"
            sleep 5
          done
          docker cp ./scripts/insert_data.sh $CONTAINERNAME:/usr/bin
          docker exec $CONTAINERNAME POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} POSTGRES_DB=${{ secrets.POSTGRES_DB }} ./usr/bin/insert_data.sh
          docker commit $CONTAINERNAME ghcr.io/${{ github.repository }}:latest
          docker push ghcr.io/${{ github.repository }}:latest
        fi
